import java.util.Scanner;

// Node class for the doubly linked list
class Node<T> {
    T value;
    Node<T> next;
    Node<T> previous;

    // Constructor to create a new node with a given value
    public Node(T value) {
        this.value = value;
        this.next = null;
        this.previous = null;
    }
}

// Implementation of a doubly linked list
public class DoublyLinkedList<T> {
    private Node<T> head;

    // Constructor to initialize an empty list
    public DoublyLinkedList() {
        this.head = null;
    }

    // Method to add a node at the start of the list
    public void addAtStart(T value) {
        Node<T> newNode = new Node<>(value);
        if (head != null) {
            head.previous = newNode;
            newNode.next = head;
        }
        head = newNode;
        System.out.println("Element added: " + value);
    }
// Method to remove the first occurrence of a specified value
    public boolean remove(T value) {
        if (head == null) {
            System.out.println("List is empty. Cannot remove element: " + value);
            return false;
        }
        Node<T> current = head;
        while (current != null && !current.value.equals(value)) {
            current = current.next;
        }
        if (current == null) {
            System.out.println("Element not found: " + value);
            return false;
        }
        if (current.previous != null) {
            current.previous.next = current.next;
        } else {
            head = current.next;
        }
        if (current.next != null) {
            current.next.previous = current.previous;
        }
        System.out.println("Element removed: " + value);
        return true;
    }
 // Method to check if the list contains a specified value
    public boolean contains(T value) {
        Node<T> current = head;
        while (current != null) {
            if (current.value.equals(value)) {
                System.out.println("Element found: " + value);
                return true;
            }
            current = current.next;
        }
        System.out.println("Element not found: " + value);
        return false;
    }

    // Method to display all elements of the list
    public void display() {
        if (head == null) {
            System.out.println("The list is empty.");
            return;
        }
        Node<T> current = head;
        while (current != null) {
            System.out.print(current.value + " <-> ");
            current = current.next;
        }
        System.out.println("null");
    }

// Main method for testing the doubly linked list implementation
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        DoublyLinkedList<Integer> list = new DoublyLinkedList<>();

        // Initial elements
        list.addAtStart(15);
        list.addAtStart(10);
        list.addAtStart(5);

        // Display the initial list
        System.out.println("Initial list:");
        list.display();

        // Add a new element at the beginning
        System.out.print("Enter element to add at the beginning : ");
        int newElement = scanner.nextInt();
        list.addAtStart(newElement);

        // Display the list after addition
        System.out.println("List after adding element:");
        list.display();

        // Remove an element
        System.out.print("Enter element to remove: ");
        int elementToRemove = scanner.nextInt();
        list.remove(elementToRemove);

        // Display the list after removal
        System.out.println("List after removing element:");
        list.display();
// Search for an element
        System.out.print("Enter element to search for: ");
        int elementToSearch = scanner.nextInt();
        boolean found = list.contains(elementToSearch);
        System.out.println("Element " + elementToSearch + " found: " + found);

        scanner.close();
    }
}
