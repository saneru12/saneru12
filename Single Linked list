import java.util.Scanner;

// Class representing a node in a singly linked list
class Node<T> {
    T value;
    Node<T> next;

    // Constructor to create a new node
    Node(T value) {
        this.value = value;
        this.next = null;
    }
}

// Singly linked list implementation
public class SinglyLinkedList<T> {
    private Node<T> head;

    // Constructor to create an empty linked list
    public SinglyLinkedList() {
        this.head = null;
    }
// Method to add an element at the beginning of the list
    public void addAtBeginning(T value) {
        Node<T> newNode = new Node<>(value);
        newNode.next = head;
        head = newNode;
        System.out.println("Added: " + value);
    }

    // Method to delete the first occurrence of an element
    public boolean remove(T value) {
        if (head == null) {
            System.out.println("List is empty, cannot delete: " + value);
            return false;
        }
if (head.value.equals(value)) {
            head = head.next;
            System.out.println("Removed: " + value);
            return true;
        }

        Node<T> current = head;
        while (current.next != null && !current.next.value.equals(value)) {
            current = current.next;
        }

        if (current.next == null) {
            System.out.println("Element not found: " + value);
            return false;
        }

        current.next = current.next.next;
        System.out.println("Removed: " + value);
        return true;
    }

    // Method to search for an element in the list
    public boolean search(T value) {
        Node<T> current = head;
        while (current != null) {
            if (current.value.equals(value)) {
                System.out.println("Found: " + value);
                return true;
            }
            current = current.next;
        }
        System.out.println("Not found: " + value);
        return false;
    }
 // Method to print the elements of the list
    public void displayList() {
        if (head == null) {
            System.out.println("The list is empty.");
        } else {
            Node<T> current = head;
            while (current != null) {
                System.out.print(current.value + " -> ");
                current = current.next;
            }
            System.out.println("null");
        }
    }

    // Main method for testing the linked list implementation
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        SinglyLinkedList<Integer> list = new SinglyLinkedList<>();

        // Populate the list with some initial elements
        list.addAtBeginning(15);
        list.addAtBeginning(10);
        list.addAtBeginning(5);

        // Print the initial list
        System.out.println("Initial list:");
        list.displayList();

        // Adding an element at the beginning
        System.out.print("Enter element to add at the beginning: ");
        int elementToAdd = scanner.nextInt();
        list.addAtBeginning(elementToAdd);

        // Print the list after insertion
        System.out.println("List after adding:");
        list.displayList();
// Deleting an element
        System.out.print("Enter element to remove: ");
        int elementToRemove = scanner.nextInt();
        list.remove(elementToRemove);

        // Print the list after deletion
        System.out.println("List after removing:");
        list.displayList();

        // Searching for an element
        System.out.print("Enter element to search: ");
        int elementToSearch = scanner.nextInt();
        boolean isFound = list.search(elementToSearch);
        System.out.println("Search result: " + isFound);

        scanner.close();
    }
}
